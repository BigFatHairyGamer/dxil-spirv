#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

uint _28;

void main()
{
    uint _25;
    if (!(gl_GlobalInvocationID.x == 0u))
    {
        uint _31;
        _31 = 0u;
        uint _26;
        uint _33 = 0u;
        bool _34;
        for (;;)
        {
            _34 = gl_GlobalInvocationID.y == 0u;
            uint frontier_phi_4_pred;
            if (!_34)
            {
                uint _38;
                _38 = 0u;
                uint _36;
                uint frontier_phi_12;
                uint _40 = _33;
                for (;;)
                {
                    uint _43 = (_38 << 7u) >> 2u;
                    if (uvec4(imageLoad(_8, int(_43)).x, imageLoad(_8, int(_43 + 1u)).x, imageLoad(_8, int(_43 + 2u)).x, imageLoad(_8, int(_43 + 3u)).x).x == 10u)
                    {
                        uint _61 = 4u >> 2u;
                        frontier_phi_12 = uvec4(imageLoad(_8, int(_61)).x, imageLoad(_8, int(_61 + 1u)).x, imageLoad(_8, int(_61 + 2u)).x, imageLoad(_8, int(_61 + 3u)).x).x + _40;
                        break;
                    }
                    else
                    {
                        uint frontier_phi_10_pred;
                        if (!(gl_GlobalInvocationID.z == 0u))
                        {
                            uint frontier_phi_16;
                            uint _79 = _40;
                            uint _80 = 0u;
                            for (;;)
                            {
                                uint _83 = (_80 << 7u) >> 2u;
                                if (uvec4(imageLoad(_8, int(_83)).x, imageLoad(_8, int(_83 + 1u)).x, imageLoad(_8, int(_83 + 2u)).x, imageLoad(_8, int(_83 + 3u)).x).x == 10u)
                                {
                                    uint _99 = 8u >> 2u;
                                    frontier_phi_16 = uvec4(imageLoad(_8, int(_99)).x, imageLoad(_8, int(_99 + 1u)).x, imageLoad(_8, int(_99 + 2u)).x, imageLoad(_8, int(_99 + 3u)).x).x + _79;
                                    break;
                                }
                                else
                                {
                                    uint _116 = (((_38 ^ _31) ^ _80) << 2u) >> 2u;
                                    uint _77 = uvec4(imageLoad(_8, int(_116)).x, imageLoad(_8, int(_116 + 1u)).x, imageLoad(_8, int(_116 + 2u)).x, imageLoad(_8, int(_116 + 3u)).x).x + _79;
                                    uint _81 = _80 + 1u;
                                    if (_81 < gl_GlobalInvocationID.z)
                                    {
                                        _79 = _77;
                                        _80 = _81;
                                        continue;
                                    }
                                    else
                                    {
                                        frontier_phi_16 = _77;
                                        break;
                                    }
                                }
                            }
                            frontier_phi_10_pred = frontier_phi_16;
                        }
                        else
                        {
                            frontier_phi_10_pred = _40;
                        }
                        _36 = frontier_phi_10_pred;
                        uint _39 = _38 + 1u;
                        if (_39 < gl_GlobalInvocationID.y)
                        {
                            _38 = _39;
                            _40 = _36;
                            continue;
                        }
                        else
                        {
                            frontier_phi_12 = _36;
                            break;
                        }
                    }
                }
                frontier_phi_4_pred = frontier_phi_12;
            }
            else
            {
                frontier_phi_4_pred = _33;
            }
            _26 = frontier_phi_4_pred;
            uint _32 = _31 + 1u;
            if (_32 == gl_GlobalInvocationID.x)
            {
                break;
            }
            else
            {
                _31 = _32;
                _33 = _26;
                continue;
            }
        }
        _25 = _26;
    }
    else
    {
        _25 = 0u;
    }
    imageStore(_8, int(0u >> 2u), uvec4(_25));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 157
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %131 "frontier_phi_16"
OpName %132 "frontier_phi_10.pred"
OpName %133 "frontier_phi_12"
OpName %134 "frontier_phi_4.pred"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 0
%18 = OpConstant %5 1
%21 = OpConstant %5 2
%23 = OpTypeBool
%29 = OpTypeVector %5 4
%42 = OpConstant %5 7
%54 = OpConstant %5 3
%59 = OpConstant %5 10
%60 = OpConstant %5 4
%98 = OpConstant %5 8
%3 = OpFunction %1 None %2
%4 = OpLabel
%28 = OpUndef %5
OpBranch %135
%135 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%17 = OpAccessChain %13 %12 %18
%19 = OpLoad %5 %17
%20 = OpAccessChain %13 %12 %21
%22 = OpLoad %5 %20
%24 = OpIEqual %23 %16 %15
OpSelectionMerge %155 None
OpBranchConditional %24 %155 %136
%136 = OpLabel
OpBranch %137
%137 = OpLabel
%31 = OpPhi %5 %15 %136 %32 %153
%33 = OpPhi %5 %15 %136 %26 %153
%34 = OpIEqual %23 %19 %15
OpLoopMerge %154 %153 None
OpBranch %138
%138 = OpLabel
OpSelectionMerge %152 None
OpBranchConditional %34 %152 %139
%139 = OpLabel
OpBranch %140
%140 = OpLabel
%38 = OpPhi %5 %15 %139 %39 %149
%40 = OpPhi %5 %33 %139 %36 %149
%41 = OpShiftLeftLogical %5 %38 %42
%43 = OpShiftRightLogical %5 %41 %21
%44 = OpImageRead %29 %9 %43
%45 = OpCompositeExtract %5 %44 0
%47 = OpIAdd %5 %43 %18
%46 = OpImageRead %29 %9 %47
%48 = OpCompositeExtract %5 %46 0
%50 = OpIAdd %5 %43 %21
%49 = OpImageRead %29 %9 %50
%51 = OpCompositeExtract %5 %49 0
%53 = OpIAdd %5 %43 %54
%52 = OpImageRead %29 %9 %53
%55 = OpCompositeExtract %5 %52 0
%56 = OpCompositeConstruct %29 %45 %48 %51 %55
%57 = OpCompositeExtract %5 %56 0
%58 = OpIEqual %23 %57 %59
OpLoopMerge %151 %149 None
OpBranchConditional %58 %150 %141
%150 = OpLabel
%61 = OpShiftRightLogical %5 %60 %21
%62 = OpImageRead %29 %9 %61
%63 = OpCompositeExtract %5 %62 0
%65 = OpIAdd %5 %61 %18
%64 = OpImageRead %29 %9 %65
%66 = OpCompositeExtract %5 %64 0
%68 = OpIAdd %5 %61 %21
%67 = OpImageRead %29 %9 %68
%69 = OpCompositeExtract %5 %67 0
%71 = OpIAdd %5 %61 %54
%70 = OpImageRead %29 %9 %71
%72 = OpCompositeExtract %5 %70 0
%73 = OpCompositeConstruct %29 %63 %66 %69 %72
%74 = OpCompositeExtract %5 %73 0
%35 = OpIAdd %5 %74 %40
OpBranch %151
%141 = OpLabel
%75 = OpIEqual %23 %22 %15
OpSelectionMerge %148 None
OpBranchConditional %75 %148 %142
%142 = OpLabel
OpBranch %143
%143 = OpLabel
%79 = OpPhi %5 %40 %142 %77 %145
%80 = OpPhi %5 %15 %142 %81 %145
%82 = OpShiftLeftLogical %5 %80 %42
%83 = OpShiftRightLogical %5 %82 %21
%84 = OpImageRead %29 %9 %83
%85 = OpCompositeExtract %5 %84 0
%87 = OpIAdd %5 %83 %18
%86 = OpImageRead %29 %9 %87
%88 = OpCompositeExtract %5 %86 0
%90 = OpIAdd %5 %83 %21
%89 = OpImageRead %29 %9 %90
%91 = OpCompositeExtract %5 %89 0
%93 = OpIAdd %5 %83 %54
%92 = OpImageRead %29 %9 %93
%94 = OpCompositeExtract %5 %92 0
%95 = OpCompositeConstruct %29 %85 %88 %91 %94
%96 = OpCompositeExtract %5 %95 0
%97 = OpIEqual %23 %96 %59
OpLoopMerge %147 %145 None
OpBranchConditional %97 %146 %144
%146 = OpLabel
%99 = OpShiftRightLogical %5 %98 %21
%100 = OpImageRead %29 %9 %99
%101 = OpCompositeExtract %5 %100 0
%103 = OpIAdd %5 %99 %18
%102 = OpImageRead %29 %9 %103
%104 = OpCompositeExtract %5 %102 0
%106 = OpIAdd %5 %99 %21
%105 = OpImageRead %29 %9 %106
%107 = OpCompositeExtract %5 %105 0
%109 = OpIAdd %5 %99 %54
%108 = OpImageRead %29 %9 %109
%110 = OpCompositeExtract %5 %108 0
%111 = OpCompositeConstruct %29 %101 %104 %107 %110
%112 = OpCompositeExtract %5 %111 0
%76 = OpIAdd %5 %112 %79
OpBranch %147
%144 = OpLabel
OpBranch %145
%145 = OpLabel
%113 = OpBitwiseXor %5 %38 %31
%114 = OpBitwiseXor %5 %113 %80
%115 = OpShiftLeftLogical %5 %114 %21
%116 = OpShiftRightLogical %5 %115 %21
%117 = OpImageRead %29 %9 %116
%118 = OpCompositeExtract %5 %117 0
%120 = OpIAdd %5 %116 %18
%119 = OpImageRead %29 %9 %120
%121 = OpCompositeExtract %5 %119 0
%123 = OpIAdd %5 %116 %21
%122 = OpImageRead %29 %9 %123
%124 = OpCompositeExtract %5 %122 0
%126 = OpIAdd %5 %116 %54
%125 = OpImageRead %29 %9 %126
%127 = OpCompositeExtract %5 %125 0
%128 = OpCompositeConstruct %29 %118 %121 %124 %127
%129 = OpCompositeExtract %5 %128 0
%77 = OpIAdd %5 %129 %79
%81 = OpIAdd %5 %80 %18
%130 = OpULessThan %23 %81 %22
OpBranchConditional %130 %143 %147
%147 = OpLabel
%131 = OpPhi %5 %77 %145 %76 %146
OpBranch %148
%148 = OpLabel
%132 = OpPhi %5 %40 %141 %131 %147
%36 = OpCopyObject %5 %132
OpBranch %149
%149 = OpLabel
%39 = OpIAdd %5 %38 %18
%78 = OpULessThan %23 %39 %19
OpBranchConditional %78 %140 %151
%151 = OpLabel
%133 = OpPhi %5 %36 %149 %35 %150
OpBranch %152
%152 = OpLabel
%134 = OpPhi %5 %33 %138 %133 %151
%26 = OpCopyObject %5 %134
OpBranch %153
%153 = OpLabel
%32 = OpIAdd %5 %31 %18
%37 = OpIEqual %23 %32 %16
OpBranchConditional %37 %154 %137
%154 = OpLabel
OpBranch %155
%155 = OpLabel
%25 = OpPhi %5 %15 %135 %26 %154
%27 = OpShiftRightLogical %5 %15 %21
%30 = OpCompositeConstruct %29 %25 %25 %25 %25
OpImageWrite %9 %27 %30
OpReturn
OpFunctionEnd
#endif
