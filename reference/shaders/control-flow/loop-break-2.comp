#version 460
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

uint _24;

void main()
{
    uint _20;
    if (!(gl_GlobalInvocationID.z == 0u))
    {
        uint frontier_phi_6;
        uint _27 = 0u;
        uint _28 = 0u;
        uint _46;
        for (;;)
        {
            uint _31 = (_28 << 2u) >> 2u;
            _46 = uvec4(imageLoad(_8, int(_31)).x, imageLoad(_8, int(_31 + 1u)).x, imageLoad(_8, int(_31 + 2u)).x, imageLoad(_8, int(_31 + 3u)).x).x;
            if (_46 == 30u)
            {
                uint _50 = 100u >> 2u;
                frontier_phi_6 = uvec4(imageLoad(_8, int(_50)).x, imageLoad(_8, int(_50 + 1u)).x, imageLoad(_8, int(_50 + 2u)).x, imageLoad(_8, int(_50 + 3u)).x).x + _27;
                break;
            }
            else
            {
                uint _22 = _46 + _27;
                uint _29 = _28 + 1u;
                if (_29 < gl_GlobalInvocationID.z)
                {
                    _27 = _22;
                    _28 = _29;
                    continue;
                }
                else
                {
                    frontier_phi_6 = _22;
                    break;
                }
            }
        }
        _20 = frontier_phi_6;
    }
    else
    {
        _20 = 0u;
    }
    imageStore(_8, int(0u >> 2u), uvec4(_20));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 75
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %65 "frontier_phi_6"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %12 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%13 = OpTypePointer Input %5
%15 = OpConstant %5 2
%17 = OpTypeBool
%19 = OpConstant %5 0
%25 = OpTypeVector %5 4
%36 = OpConstant %5 1
%43 = OpConstant %5 3
%48 = OpConstant %5 30
%49 = OpConstant %5 100
%3 = OpFunction %1 None %2
%4 = OpLabel
%24 = OpUndef %5
OpBranch %66
%66 = OpLabel
%9 = OpLoad %6 %8
%14 = OpAccessChain %13 %12 %15
%16 = OpLoad %5 %14
%18 = OpIEqual %17 %16 %19
OpSelectionMerge %73 None
OpBranchConditional %18 %73 %67
%67 = OpLabel
OpBranch %68
%68 = OpLabel
%27 = OpPhi %5 %19 %67 %22 %70
%28 = OpPhi %5 %19 %67 %29 %70
%30 = OpShiftLeftLogical %5 %28 %15
%31 = OpShiftRightLogical %5 %30 %15
%32 = OpImageRead %25 %9 %31
%33 = OpCompositeExtract %5 %32 0
%35 = OpIAdd %5 %31 %36
%34 = OpImageRead %25 %9 %35
%37 = OpCompositeExtract %5 %34 0
%39 = OpIAdd %5 %31 %15
%38 = OpImageRead %25 %9 %39
%40 = OpCompositeExtract %5 %38 0
%42 = OpIAdd %5 %31 %43
%41 = OpImageRead %25 %9 %42
%44 = OpCompositeExtract %5 %41 0
%45 = OpCompositeConstruct %25 %33 %37 %40 %44
%46 = OpCompositeExtract %5 %45 0
%47 = OpIEqual %17 %46 %48
OpLoopMerge %72 %70 None
OpBranchConditional %47 %71 %69
%71 = OpLabel
%50 = OpShiftRightLogical %5 %49 %15
%51 = OpImageRead %25 %9 %50
%52 = OpCompositeExtract %5 %51 0
%54 = OpIAdd %5 %50 %36
%53 = OpImageRead %25 %9 %54
%55 = OpCompositeExtract %5 %53 0
%57 = OpIAdd %5 %50 %15
%56 = OpImageRead %25 %9 %57
%58 = OpCompositeExtract %5 %56 0
%60 = OpIAdd %5 %50 %43
%59 = OpImageRead %25 %9 %60
%61 = OpCompositeExtract %5 %59 0
%62 = OpCompositeConstruct %25 %52 %55 %58 %61
%63 = OpCompositeExtract %5 %62 0
%21 = OpIAdd %5 %63 %27
OpBranch %72
%69 = OpLabel
OpBranch %70
%70 = OpLabel
%22 = OpIAdd %5 %46 %27
%29 = OpIAdd %5 %28 %36
%64 = OpULessThan %17 %29 %16
OpBranchConditional %64 %68 %72
%72 = OpLabel
%65 = OpPhi %5 %22 %70 %21 %71
OpBranch %73
%73 = OpLabel
%20 = OpPhi %5 %19 %66 %65 %72
%23 = OpShiftRightLogical %5 %19 %15
%26 = OpCompositeConstruct %25 %20 %20 %20 %20
OpImageWrite %9 %23 %26
OpReturn
OpFunctionEnd
#endif
