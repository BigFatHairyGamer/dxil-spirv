#version 460
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_arithmetic : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _8;
layout(set = 0, binding = 1, r32ui) uniform writeonly uimageBuffer _9;
layout(set = 0, binding = 2, r32ui) uniform writeonly uimageBuffer _10;

uint _31;

void main()
{
    uint _28 = gl_GlobalInvocationID.x << 3u;
    imageStore(_8, int(_28 >> 2u), uvec4(subgroupBallotExclusiveBitCount(subgroupBallot(gl_GlobalInvocationID.x < 100u))));
    imageStore(_8, int(_28 >> 2u), uvec4(subgroupExclusiveAdd(gl_GlobalInvocationID.x)));
    uint _37 = _28 | 4u;
    imageStore(_8, int(_37 >> 2u), uvec4(subgroupExclusiveMul(gl_GlobalInvocationID.x)));
    imageStore(_9, int(_28 >> 2u), uvec4(subgroupExclusiveAdd(gl_GlobalInvocationID.x)));
    imageStore(_9, int(_37 >> 2u), uvec4(subgroupExclusiveMul(gl_GlobalInvocationID.x)));
    float _48 = float(gl_GlobalInvocationID.x);
    imageStore(_10, int(_28 >> 2u), uvec4(uint(subgroupExclusiveAdd(_48))));
    imageStore(_10, int(_37 >> 2u), uvec4(uint(subgroupExclusiveMul(_48))));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 59
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpCapability GroupNonUniformArithmetic
OpCapability GroupNonUniformBallot
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %16
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %9 DescriptorSet 0
OpDecorate %9 Binding 1
OpDecorate %10 DescriptorSet 0
OpDecorate %10 Binding 2
OpDecorate %16 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpVariable %7 UniformConstant
%10 = OpVariable %7 UniformConstant
%14 = OpTypeVector %5 3
%15 = OpTypePointer Input %14
%16 = OpVariable %15 Input
%17 = OpTypePointer Input %5
%19 = OpConstant %5 0
%21 = OpTypeBool
%23 = OpConstant %5 100
%24 = OpTypeVector %5 4
%26 = OpConstant %5 3
%30 = OpConstant %5 2
%38 = OpConstant %5 4
%47 = OpTypeFloat 32
%3 = OpFunction %1 None %2
%4 = OpLabel
%31 = OpUndef %5
OpBranch %57
%57 = OpLabel
%11 = OpLoad %6 %10
%12 = OpLoad %6 %9
%13 = OpLoad %6 %8
%18 = OpAccessChain %17 %16 %19
%20 = OpLoad %5 %18
%22 = OpULessThan %21 %20 %23
%25 = OpGroupNonUniformBallot %24 %26 %22
%27 = OpGroupNonUniformBallotBitCount %5 %26 ExclusiveScan %25
%28 = OpShiftLeftLogical %5 %20 %26
%29 = OpShiftRightLogical %5 %28 %30
%32 = OpCompositeConstruct %24 %27 %27 %27 %27
OpImageWrite %13 %29 %32
%33 = OpGroupNonUniformIAdd %5 %26 ExclusiveScan %20
%34 = OpShiftRightLogical %5 %28 %30
%35 = OpCompositeConstruct %24 %33 %33 %33 %33
OpImageWrite %13 %34 %35
%36 = OpGroupNonUniformIMul %5 %26 ExclusiveScan %20
%37 = OpBitwiseOr %5 %28 %38
%39 = OpShiftRightLogical %5 %37 %30
%40 = OpCompositeConstruct %24 %36 %36 %36 %36
OpImageWrite %13 %39 %40
%41 = OpGroupNonUniformIAdd %5 %26 ExclusiveScan %20
%42 = OpShiftRightLogical %5 %28 %30
%43 = OpCompositeConstruct %24 %41 %41 %41 %41
OpImageWrite %12 %42 %43
%44 = OpGroupNonUniformIMul %5 %26 ExclusiveScan %20
%45 = OpShiftRightLogical %5 %37 %30
%46 = OpCompositeConstruct %24 %44 %44 %44 %44
OpImageWrite %12 %45 %46
%48 = OpConvertUToF %47 %20
%49 = OpGroupNonUniformFAdd %47 %26 ExclusiveScan %48
%50 = OpConvertFToU %5 %49
%51 = OpShiftRightLogical %5 %28 %30
%52 = OpCompositeConstruct %24 %50 %50 %50 %50
OpImageWrite %11 %51 %52
%53 = OpGroupNonUniformFMul %47 %26 ExclusiveScan %48
%54 = OpConvertFToU %5 %53
%55 = OpShiftRightLogical %5 %37 %30
%56 = OpCompositeConstruct %24 %54 %54 %54 %54
OpImageWrite %11 %55 %56
OpReturn
OpFunctionEnd
#endif
